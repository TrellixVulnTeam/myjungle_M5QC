import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { modalController } from '@ionic/core';
import { OverlayBaseController } from '../util/overlay';
import { AngularDelegate } from './angular-delegate';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './angular-delegate';
let ModalController = class ModalController extends OverlayBaseController {
    constructor(angularDelegate, resolver, injector) {
        super(modalController);
        this.angularDelegate = angularDelegate;
        this.resolver = resolver;
        this.injector = injector;
    }
    create(opts) {
        return super.create(Object.assign({}, opts, { delegate: this.angularDelegate.create(this.resolver, this.injector) }));
    }
};
ModalController.ɵfac = function ModalController_Factory(t) { return new (t || ModalController)(ɵngcc0.ɵɵinject(ɵngcc1.AngularDelegate), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ModalController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalController, factory: function (t) { return ModalController.ɵfac(t); } });
ModalController.ctorParameters = () => [
    { type: AngularDelegate },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ModalController, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AngularDelegate }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();
export { ModalController };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udHJvbGxlci5qcyIsInNvdXJjZXMiOlsiQGlvbmljL2FuZ3VsYXIvcHJvdmlkZXJzL21vZGFsLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBR3JELElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWdCLFNBQVEscUJBQXdEO0FBQzdGLElBQ0UsWUFDVSxlQUFnQyxFQUNoQyxRQUFrQyxFQUNsQyxRQUFrQjtBQUM1QixRQUNFLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQixRQUxZLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtBQUFDLFFBQ2pDLGFBQVEsR0FBUixRQUFRLENBQTBCO0FBQUMsUUFDbkMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtBQUFDLElBRzdCLENBQUM7QUFDSCxJQUNFLE1BQU0sQ0FBQyxJQUFrQjtBQUFJLFFBQzNCLE9BQU8sS0FBSyxDQUFDLE1BQU0sbUJBQ2QsSUFBSSxJQUNQLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFDbkUsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILENBQUM7O3lJQUFBO0FBQ0Q7QUFBeUMsWUFkWixlQUFlO0FBQzFDLFlBQW9CLHdCQUF3QjtBQUM1QyxZQUFvQixRQUFRO0FBQzdCO0FBTlksZUFBZSw0QkFEM0IsVUFBVSxFQUFFLElBQ0EsZUFBZSxDQWdCM0I7O3NKQUNEO0FBQUMsU0FqQlksZUFBZTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kYWxPcHRpb25zLCBtb2RhbENvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMvY29yZSc7XG5cbmltcG9ydCB7IE92ZXJsYXlCYXNlQ29udHJvbGxlciB9IGZyb20gJy4uL3V0aWwvb3ZlcmxheSc7XG5cbmltcG9ydCB7IEFuZ3VsYXJEZWxlZ2F0ZSB9IGZyb20gJy4vYW5ndWxhci1kZWxlZ2F0ZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RhbENvbnRyb2xsZXIgZXh0ZW5kcyBPdmVybGF5QmFzZUNvbnRyb2xsZXI8TW9kYWxPcHRpb25zLCBIVE1MSW9uTW9kYWxFbGVtZW50PiB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhbmd1bGFyRGVsZWdhdGU6IEFuZ3VsYXJEZWxlZ2F0ZSxcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICkge1xuICAgIHN1cGVyKG1vZGFsQ29udHJvbGxlcik7XG4gIH1cblxuICBjcmVhdGUob3B0czogTW9kYWxPcHRpb25zKTogUHJvbWlzZTxIVE1MSW9uTW9kYWxFbGVtZW50PiB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZSh7XG4gICAgICAuLi5vcHRzLFxuICAgICAgZGVsZWdhdGU6IHRoaXMuYW5ndWxhckRlbGVnYXRlLmNyZWF0ZSh0aGlzLnJlc29sdmVyLCB0aGlzLmluamVjdG9yKVxuICAgIH0pO1xuICB9XG59XG4iXX0=